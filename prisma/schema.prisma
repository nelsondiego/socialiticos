
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
  POLITICIAN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  photoUrl  String?
  plan      Plan?    @relation(fields: [planId], references: [id])
  planId    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post              Post[]
  Comment           Comment[]
  Notification      Notification[]
  
  PoliticianProfile PoliticianProfile?
  Following         Follow[]
}

model Plan {
  id        String   @id @default(cuid())
  name      String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for PoliticianProfile
model PoliticianProfile {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  party        String
  position     String
  bio          String
  electionDate DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Followers    Follow[]
}

// Modelo Follow modificado
model Follow {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  politician   PoliticianProfile @relation(fields: [politicianId], references: [id])
  politicianId String
  createdAt    DateTime @default(now())

  @@unique([userId, politicianId])
}
